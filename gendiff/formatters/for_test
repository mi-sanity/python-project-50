######################
# def NO_build_diff(data1, data2):
    keys = sorted(set(data1.keys()).union(data2.keys()))
    diff = {}

    for key in keys:
        if key in data1 and key not in data2:
            diff[key] = ('removed', data1[key])
        elif key not in data1 and key in data2:
            diff[key] = ('added', data2[key])
        elif data1[key] == data2[key]:
            diff[key] = ('unchanged', data1[key])
        elif isinstance(data1[key], dict) and isinstance(data2[key], dict):
            diff[key] = ('nested', build_diff(data1[key], data2[key]))
        else:
            diff[key] = ('changed', (data1[key], data2[key]))
    # return diff

######################
DEFAULT_INDENT = 4
LEFT_INDENT = 2
CHANGE_DEPTH = 1


# def NO_stylish(diff):
    result = '{\n' + tree_view(diff) + '\n}'
    return result


def tree_view(diff, depth=1):
    lines = []
    for key, (status, value) in sorted(diff.items()):
        lines = create_lines(lines, key, value, depth, status)
    result = '\n'.join(lines)
    return result


def create_lines(lines, key, value, depth, status):
    prefix = '  '
    if status == 'nested':
        indent = (DEFAULT_INDENT * depth - LEFT_INDENT) * ' '
        child_diff = tree_view(value, depth + CHANGE_DEPTH)
        format_value = f'{{\n{child_diff}\n{indent}  }}'
        lines = add_format(depth, lines, prefix, key, format_value, status)
    elif status == 'changed':
        lines = add_format(depth, lines, prefix, key, value, status)
    elif status == 'added':
        prefix = '+ '
        lines = add_format(depth, lines, prefix, key, value, status)
    elif status == 'removed':
        prefix = '- '
        lines = add_format(depth, lines, prefix, key, value, status)
    else:
        lines = add_format(depth, lines, prefix, key, value, status)
    return lines


def create_format_value(value, depth):
    if isinstance(value, dict):
        prefix = '  '
        lines = ['{']
        for key, val in value.items():
            format_value = create_format_value(val, depth + CHANGE_DEPTH)
            lines = add_format(depth, lines, prefix, key, format_value)
        indent = ' ' * (DEFAULT_INDENT * (depth - CHANGE_DEPTH))
        lines.append(f"{indent}}}")
        return '\n'.join(lines)
    elif isinstance(value, bool):
        return str(value).lower()
    elif value is None:
        return 'null'
    elif isinstance(value, str):
        return value
    return str(value)


def add_format(depth, lines, prefix, key, value, status=None):
    indent = (DEFAULT_INDENT * depth - LEFT_INDENT) * ' '
    if status != 'changed':
        format_value = create_format_value(value, depth + CHANGE_DEPTH)
        lines.append(f"{indent}{prefix}{key}: {format_value}")
        return lines
    else:
        old, new = value
        old_format_value = create_format_value(old, depth + CHANGE_DEPTH)
        new_format_value = create_format_value(new, depth + CHANGE_DEPTH)
        old_prefix = '- '
        new_prefix = '+ '
        lines.append(
            f"{indent}{old_prefix}{key}: {old_format_value}"
            f"\n{indent}{new_prefix}{key}: {new_format_value}"
        )
        return lines

##########
# def NO_plain(diff):
    result = '\n'.join(plain_format(diff))
    return result


def plain_format(diff, path=""):
    lines = []

    def add_lines(status, value, full_path):
        actions = {
            "nested": lambda value, full_path: lines.extend(
                plain_format(value, full_path)
            ),
            "added": lambda value, full_path: lines.append(
                create_format_data(status, value, full_path)
            ),
            "removed": lambda value, full_path: lines.append(
                f"Property '{full_path}' was removed"
            ),
            "changed": lambda value, full_path: lines.append(
                create_format_data(status, value, full_path)
            ),
            "unchanged": lambda value, full_path: None
        }
        action = actions.get(status)
        if action:
            action(value, full_path)

    for key, (status, value) in diff.items():
        full_path = create_full_path(path, key)
        add_lines(status, value, full_path)
    return lines


def create_full_path(path, key):
    if path == "":
        full_path = f"{key}"
    else:
        full_path = f"{path}.{key}"
    return full_path


def create_format_value(value):
    if isinstance(value, dict):
        return "[complex value]"
    if isinstance(value, str):
        return f"'{value}'"
    if value is None:
        return "null"
    return str(value).lower()


def create_format_data(status, value, full_path):
    if status == "added":
        value = create_format_value(value)
        text = (
            f"Property '{full_path}' was added "
            f"with value: {value}"
        )
        return text
    elif status == "changed":
        old, new = value
        old_value = create_format_value(old)
        new_value = create_format_value(new)
        text = (
            f"Property '{full_path}' was updated. "
            f"From {old_value} to {new_value}"
        )
        return text
